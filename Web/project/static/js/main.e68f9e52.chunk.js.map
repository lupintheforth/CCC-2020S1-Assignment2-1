{"version":3,"sources":["js/actions/loading.js","js/actionTypes/loading.js","js/actions/xhr.js","js/constants/api.js","js/actionTypes/xhr.js","js/components/Spinner.jsx","js/constants/map.js","js/utils/googleMap.js","js/actions/map.js","js/actionTypes/map.js","js/actions/filter.js","js/actionTypes/filter.js","js/components/gadgets/CollapseButton.jsx","js/components/gadgets/TitleWithTooltip.jsx","js/components/Filter.jsx","js/components/Map.jsx","js/constants/credentials.js","js/components/visualisation/VerticalBarChart.jsx","js/components/visualisation/SimplePieChart.jsx","js/components/Dashboard.jsx","js/actions/search.js","js/actionTypes/search.js","js/components/SearchField.jsx","js/components/Header.jsx","js/components/App.jsx","js/reducers/mapReducer.js","js/reducers/searchReducer.js","js/reducers/loadingReducer.js","js/reducers/xhrReducer.js","js/reducers/filterReducer.js","js/reducers/index.js","index.js"],"names":["updateLoadingStatus","isLoading","type","payload","getOverviewData","dispatch","fetch","then","res","ok","json","statusText","overviewData","Spinner","connect","state","loading","containerClass","className","FULL_SCREEN_MAP","ZOOM_BOUNDARY","min","max","INITIAL_CENTER","lng","lat","CARD_MAP","getAddressWithType","address","targetType","results","find","result","types","getCityName","cityAddressObject","getCityAddressObject","address_components","long_name","getStateName","stateAddressObject","getStateAddressObject","updateMapFullScreenStatus","isFullScreen","updateDatePickerExpansionStatus","showDatePicker","CollapseButton","onClickHandler","icon","DoubleRightOutlined","onClick","TitleWithTooltip","title","tooltipInfo","placement","FilterComponent","this","props","expandDatePicker","hideDatePicker","datesRange","updateDateRange","lastClickedInfo","dateRangePicker","RangePicker","defaultValue","onChange","date","disabledDate","current","moment","endOf","CalendarOutlined","formattedAddress","cityName","stateName","addressObject","formatted_address","getFormattedAddress","span","hoverable","id","Component","Filter","map","filter","ownProps","selectedDateRange","MapComponent","getLocationInfo","clickedLocationInfo","getTheLocationInfo","debounce","bind","console","log","enterFullScreen","exitFullScreen","updateMapCenterAndZoom","SwitchComponent","FullscreenExitOutlined","switchClickHandler","mapZoomConstant","containerStyle","height","width","FullscreenOutlined","renderedMapBox","style","bootstrapURLKeys","key","defaultCenter","center","defaultZoom","zoom","options","gestureHandling","zoomControl","fullscreenControl","maxZoom","minZoom","value","Map","xhr","x","y","builtReverseGeocodingUrl","reverseGeocoding","VerticalBarChart","data","name","layout","strokeDasharray","dataKey","fill","barSize","animationDuration","SimplePieChart","COLORS","RADIAN","Math","PI","cx","cy","labelLine","label","midAngle","innerRadius","outerRadius","percent","radius","index","cos","sin","textAnchor","dominantBaseline","toFixed","entry","length","Dashboard","updateSearchFieldExpansionStatus","showSearchInput","SearchFieldComponent","__handleSelect","__handleSearch","option","expandSearchField","hideSearchField","dropdownMatchSelectWidth","onSelect","onSearch","Search","size","placeholder","enterButton","SearchOutlined","SearchField","search","HeaderComponent","Header","AppComponent","App","MAP_REDUCER_DEFAULT_VALUE","SEARCH_REDUCER_DEFAULT_VALUE","LOADING_REDUCER_DEFAULT_VALUE","XHR_REDUCER","FILTER_REDUCER_DEFAULT_VALUE","combineReducers","action","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.e68f9e52.chunk.js","sourcesContent":["import { UPDATE_LOADING_STATUS } from \"../actionTypes/loading\";\n\nfunction updateLoadingStatus(isLoading = false) {\n  return {\n    type: UPDATE_LOADING_STATUS,\n    payload: { isLoading },\n  };\n}\n\nexport const startLoading = () => updateLoadingStatus(true);\nexport const stopLoading = () => updateLoadingStatus();\n","export const UPDATE_LOADING_STATUS = \"UPDATE_LOADING_STATUS\";\n","import { startLoading, stopLoading } from \"./loading\";\nimport { API__GET_OVERALL_INFO } from \"../constants/api\";\nimport { OVERVIEW_DATA_RECEIVED } from \"../actionTypes/xhr\";\n\nexport function getOverviewData() {\n  return (dispatch) => {\n    dispatch(startLoading());\n\n    return fetch(API__GET_OVERALL_INFO)\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n\n        throw res.statusText;\n      })\n      .then((overviewData) => {\n        dispatch(stopLoading());\n        dispatch({ type: OVERVIEW_DATA_RECEIVED, payload: { overviewData } });\n      });\n  };\n}\n","// Google API.\nexport const API__GOOGLE_REVERSE_GEOCODING_FIRST_HALF =\n  \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\";\nexport const API__GOOGLE_REVERSE_GEOCODING_SECOND_HALF = \"&key=\";\n\n// Our own API.\nexport const API__GET_OVERALL_INFO = \"/api/overview\";\n","export const OVERVIEW_DATA_RECEIVED = \"OVERVIEW_DATA_RECEIVED\";\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"../../css/spinner.css\";\n\n/**\n * Acknowledgement: this spinner is borrowed from [this website](https://tobiasahlin.com/spinkit/).\n *\n * @returns\n */\nfunction SpinnerComponent({ isLoading }) {\n  const containerClass = \"spinner-container\" + (isLoading ? \"\" : \" hidden\");\n  return (\n    <section className={containerClass}>\n      <div className=\"sk-chase\">\n        <div className=\"sk-chase-dot\"></div>\n        <div className=\"sk-chase-dot\"></div>\n        <div className=\"sk-chase-dot\"></div>\n        <div className=\"sk-chase-dot\"></div>\n        <div className=\"sk-chase-dot\"></div>\n        <div className=\"sk-chase-dot\"></div>\n      </div>\n    </section>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  const { isLoading } = state.loading;\n  return { isLoading };\n};\n\nconst Spinner = connect(mapStateToProps)(SpinnerComponent);\n\nexport { Spinner };\n","// Map max boundary.\nconst AUSTRALIA_MAP_SW_BOUND = [98.49663749999871, -44.645685161059006];\nconst AUSTRALIA_MAP_NE_BOUND = [172.10503593749945, -7.570101850059672];\nexport const AUSTRALIA_MAP_BOUNDS = [\n  AUSTRALIA_MAP_SW_BOUND,\n  AUSTRALIA_MAP_NE_BOUND,\n];\n\n// Map zoom boundary.\nexport const FULL_SCREEN_MAP = {\n  ZOOM_BOUNDARY: { min: 5, max: 12 },\n  INITIAL_CENTER: { lng: 135.4107, lat: -27.616 },\n};\n\nexport const CARD_MAP = {\n  ZOOM_BOUNDARY: { min: 4.5, max: 12 },\n  INITIAL_CENTER: { lng: 135.4107, lat: -14 },\n};\n","import {\n  API__GOOGLE_REVERSE_GEOCODING_FIRST_HALF,\n  API__GOOGLE_REVERSE_GEOCODING_SECOND_HALF,\n} from \"../constants/api\";\nimport { GOOGLE_MAP_API_KEY } from \"../constants/credentials\";\n\n/**\n * Given the latitude and longitude, create the API string.\n *\n * @export\n * @param {*} lat Latitude\n * @param {*} lng Longitude\n * @returns\n */\nexport function builtReverseGeocodingUrl(lat, lng) {\n  return `${API__GOOGLE_REVERSE_GEOCODING_FIRST_HALF}${lat},${lng}${API__GOOGLE_REVERSE_GEOCODING_SECOND_HALF}${GOOGLE_MAP_API_KEY}`;\n}\n\n/**\n * Get the formatted address from the Google returned JSON.\n *\n * @export\n * @param {*} address Google returned JSON.\n * @returns\n */\nexport function getFormattedAddress(address) {\n  try {\n    return address.results[0].formatted_address;\n  } catch {\n    return \"\";\n  }\n}\n\n/**\n * Given the address object, find the address address with given type.\n *\n * @param {*} address Google returned JSON.\n * @param {*} targetType Address type to be looked against.\n * @returns Address object with given type, otherwise null.\n */\nfunction getAddressWithType(address, targetType) {\n  try {\n    return address.results.find((result) =>\n      result.types.find((type) => type === targetType)\n    );\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Get the admin area level 2 (city)'s address object.\n *\n * @export\n * @param {*} address Google returned JSON.\n * @returns Admin Area Level 2 (city) object, otherwise null.\n */\nexport function getCityAddressObject(address) {\n  return getAddressWithType(address, \"administrative_area_level_2\");\n}\n\n/**\n * Get the admin area level 2 (city)'s name\n *\n * @export\n * @param {*} address Google returned JSON.\n * @returns City name if found, otherwise empty string.\n */\nexport function getCityName(address) {\n  const cityAddressObject = getCityAddressObject(address);\n  if (cityAddressObject) {\n    return cityAddressObject.address_components[0].long_name;\n  }\n\n  return \"\";\n}\n\n/**\n * Get the admin area level 1 (state)'s address object.\n *\n * @export\n * @param {*} address Google returned JSON.\n * @returns Admin Area Level 1 (state) object, otherwise null.\n */\nexport function getStateAddressObject(address) {\n  return getAddressWithType(address, \"administrative_area_level_1\");\n}\n\n/**\n * Get the admin area level 1 (state)'s name.\n *\n * @export\n * @param {*} address Google returned JSON.\n * @returns State name if found, otherwise empty string.\n */\nexport function getStateName(address) {\n  const stateAddressObject = getStateAddressObject(address);\n  if (stateAddressObject) {\n    return stateAddressObject.address_components[0].long_name;\n  }\n\n  return \"\";\n}\n","import {\n  UPDATE_MAP_FULL_SCREEN_STATUS,\n  UPDATE_MAP_CENTER_AND_ZOOM,\n  UPDATE_LAST_CLICKED_INFO,\n} from \"../actionTypes/map\";\nimport { builtReverseGeocodingUrl } from \"../utils/googleMap\";\n\nexport function updateMapFullScreenStatus(isFullScreen = true) {\n  return {\n    type: UPDATE_MAP_FULL_SCREEN_STATUS,\n    payload: { isFullScreen },\n  };\n}\n\nexport function updateMapCenterAndZoom(center, zoom) {\n  return {\n    type: UPDATE_MAP_CENTER_AND_ZOOM,\n    payload: { center, zoom },\n  };\n}\n\nexport const reverseGeocoding = ({ lat, lng, x, y }) => (dispatch) =>\n  fetch(builtReverseGeocodingUrl(lat, lng))\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw res.statusText;\n    })\n    .then((address) => {\n      console.log(\"address =\", address);\n      dispatch({\n        type: UPDATE_LAST_CLICKED_INFO,\n        payload: { lastClickedInfo: { lat, lng, x, y, address } },\n      });\n    });\n","export const UPDATE_MAP_FULL_SCREEN_STATUS = \"UPDATE_MAP_FULL_SCREEN_STATUS\";\nexport const UPDATE_MAP_CENTER_AND_ZOOM = \"UPDATE_MAP_CENTER_AND_ZOOM\";\nexport const UPDATE_LAST_CLICKED_INFO = \"UPDATE_LAST_CLICKED_INFO\";\n","import {\n  UPDATE_DATE_PICKER_EXPANSION_STATUS,\n  UPDATE_DATE_RANGE,\n} from \"../actionTypes/filter\";\n\nexport function updateDatePickerExpansionStatus(showDatePicker = true) {\n  return {\n    type: UPDATE_DATE_PICKER_EXPANSION_STATUS,\n    payload: { showDatePicker },\n  };\n}\n\nexport function updateDateRange(datesRange = []) {\n  return {\n    type: UPDATE_DATE_RANGE,\n    payload: { datesRange },\n  };\n}\n","export const UPDATE_DATE_PICKER_EXPANSION_STATUS =\n  \"UPDATE_DATE_PICKER_EXPANSION_STATUS\";\nexport const UPDATE_DATE_RANGE = \"UPDATE_DATE_RANGE\";\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { DoubleRightOutlined } from \"@ant-design/icons\";\n\nexport function CollapseButton({ onClickHandler }) {\n  return (\n    <Button\n      icon={<DoubleRightOutlined />}\n      className={\"collapse-btn\"}\n      onClick={onClickHandler}\n    />\n  );\n}\n","import React from \"react\";\nimport { Tooltip } from \"antd\";\n\nexport function TitleWithTooltip({\n  title,\n  tooltipInfo,\n  placement = \"topLeft\",\n}) {\n  return (\n    <Tooltip title={tooltipInfo} placement={placement}>\n      <h3>{title}</h3>\n    </Tooltip>\n  );\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport { Card, Col } from \"antd\";\nimport { CalendarOutlined } from \"@ant-design/icons\";\nimport { DatePicker } from \"antd\";\n\nimport {\n  updateDatePickerExpansionStatus,\n  updateDateRange,\n} from \"../actions/filter\";\nimport { CollapseButton, TitleWithTooltip } from \"./gadgets\";\nimport {\n  getFormattedAddress,\n  getCityName,\n  getStateName,\n} from \"../utils/googleMap\";\n\nimport \"../../css/filter.css\";\n\nclass FilterComponent extends Component {\n  render() {\n    const {\n      isFullScreen,\n      showDatePicker,\n      expandDatePicker,\n      hideDatePicker,\n      datesRange,\n      updateDateRange,\n      lastClickedInfo,\n    } = this.props;\n\n    const dateRangePicker = (\n      <DatePicker.RangePicker\n        defaultValue={datesRange}\n        onChange={(date) => updateDateRange(date)}\n        disabledDate={(current) => current && current > moment().endOf(\"day\")}\n      />\n    );\n\n    if (isFullScreen) {\n      if (showDatePicker) {\n        return (\n          <section className={\"collapsible-section filter map--fullScreen\"}>\n            <CollapseButton onClickHandler={hideDatePicker} />\n            {dateRangePicker}\n          </section>\n        );\n      }\n      return (\n        <CalendarOutlined\n          className={\"clickable filter map--fullScreen\"}\n          onClick={expandDatePicker}\n        />\n      );\n    }\n\n    let formattedAddress = \"\";\n    let cityName = \"\";\n    let stateName = \"\";\n    if (lastClickedInfo && lastClickedInfo.address) {\n      const addressObject = lastClickedInfo.address;\n      formattedAddress = getFormattedAddress(addressObject);\n      cityName = getCityName(addressObject);\n      stateName = getStateName(addressObject);\n    }\n\n    return (\n      <Col span={12}>\n        <Card hoverable id={\"filter-card\"} className=\"col-6\" title={\"Filters\"}>\n          <Card\n            hoverable\n            type=\"inner\"\n            title={\n              <TitleWithTooltip\n                title={\"Date Range\"}\n                tooltipInfo={\"Please select the date range you want to explore\"}\n              />\n            }\n          >\n            {dateRangePicker}\n          </Card>\n          <Card\n            hoverable\n            type=\"inner\"\n            title={\n              <TitleWithTooltip\n                title={\"Location\"}\n                tooltipInfo={\n                  lastClickedInfo\n                    ? \"This is the position you clicked on the map.\"\n                    : \"By default we will show data within Australia\"\n                }\n              />\n            }\n          >\n            {lastClickedInfo && formattedAddress ? (\n              <>\n                <p>\n                  <b>Formatted Address: </b>\n                  {formattedAddress}\n                </p>\n                {cityName && (\n                  <p>\n                    <b>City: </b> {cityName}\n                  </p>\n                )}\n                {stateName && (\n                  <p>\n                    <b>State: </b> {stateName}\n                  </p>\n                )}\n              </>\n            ) : (\n              <p>Australia</p>\n            )}\n          </Card>\n        </Card>\n      </Col>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { isFullScreen, lastClickedInfo } = state.map;\n  const { showDatePicker, datesRange } = state.filter;\n  return { isFullScreen, showDatePicker, datesRange, lastClickedInfo };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    expandDatePicker: () => dispatch(updateDatePickerExpansionStatus()),\n    hideDatePicker: () => dispatch(updateDatePickerExpansionStatus(false)),\n    updateDateRange: (selectedDateRange) =>\n      dispatch(updateDateRange(selectedDateRange)),\n  };\n};\nconst Filter = connect(mapStateToProps, mapDispatchToProps)(FilterComponent);\n\nexport { Filter };\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Card, Popover } from \"antd\";\nimport {\n  FullscreenExitOutlined,\n  FullscreenOutlined,\n  FlagFilled,\n} from \"@ant-design/icons\";\nimport GoogleMapReact from \"google-map-react\";\nimport debounce from \"lodash.debounce\";\n\nimport \"../../css/map.css\";\nimport { FULL_SCREEN_MAP, CARD_MAP } from \"../constants/map\";\nimport {\n  updateMapFullScreenStatus,\n  updateMapCenterAndZoom,\n  reverseGeocoding,\n} from \"../actions/map\";\nimport { Filter } from \"./Filter\";\nimport { GOOGLE_MAP_API_KEY } from \"../constants/credentials\";\n\nclass MapComponent extends Component {\n  getLocationInfo = (clickedLocationInfo) => {\n    this.props.getTheLocationInfo(clickedLocationInfo);\n  };\n\n  constructor(props) {\n    super(props);\n    this.getLocationInfo = debounce(this.getLocationInfo.bind(this), 500);\n  }\n\n  render() {\n    console.log(\"Map, this.props = \", this.props);\n\n    const {\n      isFullScreen,\n      enterFullScreen,\n      exitFullScreen,\n      updateMapCenterAndZoom,\n      lastClickedInfo,\n    } = this.props;\n\n    let SwitchComponent = FullscreenExitOutlined;\n    let switchClickHandler = exitFullScreen;\n    let mapZoomConstant = FULL_SCREEN_MAP.ZOOM_BOUNDARY;\n    let containerStyle = {\n      height: \"100vh\",\n      width: \"100%\",\n    };\n\n    if (!isFullScreen) {\n      SwitchComponent = FullscreenOutlined;\n      switchClickHandler = enterFullScreen;\n      mapZoomConstant = CARD_MAP.ZOOM_BOUNDARY;\n      containerStyle = {\n        height: \"100%\",\n        width: \"100%\",\n      };\n    }\n\n    const renderedMapBox = (\n      <>\n        <div style={containerStyle}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: GOOGLE_MAP_API_KEY }}\n            defaultCenter={this.props.center}\n            defaultZoom={this.props.zoom}\n            options={{\n              gestureHandling: isFullScreen ? \"cooperative\" : \"greedy\",\n              zoomControl: false,\n              fullscreenControl: false,\n              maxZoom: mapZoomConstant.max,\n              minZoom: mapZoomConstant.min,\n            }}\n            onChange={({ zoom, center }) =>\n              updateMapCenterAndZoom(center, zoom)\n            }\n            onClick={(value) => {\n              console.log(\"onClick trigerred, value =\", value);\n              this.getLocationInfo(value);\n            }}\n          ></GoogleMapReact>\n        </div>\n\n        {/* {lastClickedInfo && (\n          <Popover\n            title={\"hello world\"}\n            content={\"HELLO WORLD\"}\n            visible={true}\n            \n          >\n            <span\n              style={{\n                left: lastClickedInfo.x,\n                top: lastClickedInfo.y,\n                position: \"absolute\",\n                width: \"1rem\",\n                height: \"1rem\",\n                visibility: \"hidden\",\n              }}\n            ></span>\n          </Popover>\n        )} */}\n\n        <SwitchComponent\n          className={\"clickable map-full-screen-switch\"}\n          onClick={() => {\n            switchClickHandler();\n          }}\n        />\n        {isFullScreen && <Filter />}\n      </>\n    );\n\n    if (isFullScreen) {\n      return renderedMapBox;\n    }\n\n    return (\n      <Row id={\"map-container\"}>\n        <Col span={12}>\n          <Card hoverable className=\"col-6\">\n            {renderedMapBox}\n          </Card>\n        </Col>\n        <Filter />\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { isFullScreen, center, zoom, lastClickedInfo } = state.map;\n  const { overviewData } = state.xhr;\n  return { isFullScreen, center, zoom, overviewData, lastClickedInfo };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    enterFullScreen: () => dispatch(updateMapFullScreenStatus(true)),\n    exitFullScreen: () => dispatch(updateMapFullScreenStatus(false)),\n    updateMapCenterAndZoom: (center, zoom) =>\n      dispatch(updateMapCenterAndZoom(center, zoom)),\n    getTheLocationInfo: (clickedLocationInfo) =>\n      reverseGeocoding(clickedLocationInfo)(dispatch),\n  };\n};\n\nconst Map = connect(mapStateToProps, mapDispatchToProps)(MapComponent);\n\nexport { Map };\n","export const GOOGLE_MAP_API_KEY = \"AIzaSyDPvEDDdrknvPKqdpl3lfTv547o2mPltuw\";\n","import React, { Component } from \"react\";\nimport { Bar, BarChart, CartesianGrid, Tooltip, XAxis, YAxis } from \"recharts\";\n\nclass VerticalBarChart extends Component {\n  render() {\n    const data = [\n      {\n        name: \"Confirmed\",\n        value: 4000,\n      },\n      {\n        name: \"Deaths\",\n        value: 46,\n      },\n      {\n        name: \"Cured\",\n        value: 2612,\n      },\n      {\n        name: \"Active\",\n        value: 418,\n      },\n    ];\n\n    return (\n      <div>\n        <BarChart width={600} height={250} data={data} layout=\"vertical\">\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis type=\"number\" />\n          <YAxis dataKey=\"name\" type=\"category\" width={80} />\n          <Tooltip />\n          <Bar\n            dataKey=\"value\"\n            fill=\"#8884d8\"\n            barSize={40}\n            animationDuration={4000}\n            name=\"Number\"\n          />\n        </BarChart>\n      </div>\n    );\n  }\n}\n\nexport { VerticalBarChart };\n","import React, { Component } from \"react\";\nimport { PieChart, Pie, Cell, Tooltip } from \"recharts\";\n\nclass SimplePieChart extends Component {\n  render() {\n    const data = [\n      { name: \"Male\", value: 61779 },\n      { name: \"Female\", value: 65070 },\n    ];\n\n    const COLORS = [\"#0088FE\", \"#FF8042\", \"#00C49F\", \"#FFBB28\"];\n    const RADIAN = Math.PI / 180;\n    const renderCustomizedLabel = ({\n      cx,\n      cy,\n      midAngle,\n      innerRadius,\n      outerRadius,\n      percent,\n      index,\n    }) => {\n      const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n      const x = cx + radius * Math.cos(-midAngle * RADIAN);\n      const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n      return (\n        <text\n          x={x}\n          y={y}\n          fill=\"white\"\n          textAnchor={x > cx ? \"start\" : \"end\"}\n          dominantBaseline=\"central\"\n        >\n          {`${(percent * 100).toFixed(0)}%`}\n        </text>\n      );\n    };\n\n    return (\n      <div>\n        <PieChart width={400} height={400}>\n          <Tooltip />\n          <Pie\n            data={data}\n            cx={200}\n            cy={200}\n            labelLine={false}\n            label={renderCustomizedLabel}\n            outerRadius={80}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n            animationDuration={4000}\n          >\n            {data.map((entry, index) => (\n              <Cell\n                key={`cell-${index}`}\n                fill={COLORS[index % COLORS.length]}\n              />\n            ))}\n          </Pie>\n        </PieChart>\n      </div>\n    );\n  }\n}\n\nexport { SimplePieChart };\n","import React, { Component } from \"react\";\nimport { Row, Col, Card } from \"antd\";\nimport \"antd/dist/antd.min.css\";\nimport { VerticalBarChart } from \"./visualisation/VerticalBarChart\";\nimport { SimplePieChart } from \"./visualisation/SimplePieChart\";\n\nclass Dashboard extends Component {\n  render() {\n    return (\n      <Row>\n        <Col span={12}>\n          <Card hoverable className=\"col-6\" title=\"Card One\">\n            <VerticalBarChart />\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card hoverable className=\"col-6\" title=\"Card Two\">\n            <SimplePieChart />\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport { Dashboard };\n","import { UPDATE_SEARCH_FIELD_EXPANSION_STATUS } from \"../actionTypes/search\";\n\nexport function updateSearchFieldExpansionStatus(showSearchInput = true) {\n  return {\n    type: UPDATE_SEARCH_FIELD_EXPANSION_STATUS,\n    payload: { showSearchInput },\n  };\n}\n","export const UPDATE_SEARCH_FIELD_EXPANSION_STATUS =\n  \"UPDATE_SEARCH_FIELD_EXPANSION_STATUS\";\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AutoComplete, Input } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\n\nimport { updateSearchFieldExpansionStatus } from \"../actions/search\";\nimport { CollapseButton } from \"./gadgets/CollapseButton\";\n\nclass SearchFieldComponent extends Component {\n  __handleSelect(value, option) {\n    console.log(\"in handleSelect, value =\", value);\n    console.log(\"in handleSelect, option =\", option);\n  }\n\n  __handleSearch(value) {\n    // use throttling to send query to backend.\n    console.log(\"in handleSearch, value =\", value);\n  }\n\n  constructor(props) {\n    super(props);\n    this.__handleSelect = this.__handleSelect.bind(this);\n    this.__handleSearch = this.__handleSearch.bind(this);\n  }\n\n  render() {\n    const { showSearchInput, expandSearchField, hideSearchField } = this.props;\n    if (!showSearchInput) {\n      return (\n        <SearchOutlined className={\"clickable\"} onClick={expandSearchField} />\n      );\n    }\n\n    return (\n      <section className={\"collapsible-section\"}>\n        <CollapseButton onClickHandler={hideSearchField} />\n        <AutoComplete\n          dropdownMatchSelectWidth={300}\n          style={{\n            width: 500,\n          }}\n          onSelect={this.__handleSelect}\n          onSearch={this.__handleSearch}\n        >\n          <Input.Search\n            size=\"large\"\n            placeholder=\"Search the location, or tweet user here.\"\n            enterButton\n          />\n        </AutoComplete>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { showSearchInput } = state.search;\n  return { showSearchInput };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    expandSearchField: () => dispatch(updateSearchFieldExpansionStatus()),\n    hideSearchField: () => dispatch(updateSearchFieldExpansionStatus(false)),\n  };\n};\n\nconst SearchField = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchFieldComponent);\n\nexport { SearchField };\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"../../css/header.css\";\nimport { SearchField } from \"./SearchField\";\n\nclass HeaderComponent extends Component {\n  render() {\n    const { isFullScreen } = this.props;\n    let className = isFullScreen ? \"map--fullScreen\" : \"map--card\";\n\n    return (\n      <header className={className}>\n        <span>COVID-19 Australia Info Center</span>\n        <SearchField />\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { isFullScreen } = state.map;\n  return { isFullScreen };\n};\n\nconst Header = connect(mapStateToProps)(HeaderComponent);\n\nexport { Header };\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { getOverviewData } from \"../actions/xhr\";\n\nimport { Spinner } from \"./Spinner\";\nimport { Map } from \"./Map\";\nimport { Dashboard } from \"./Dashboard\";\nimport { Header } from \"./Header\";\n\nclass AppComponent extends Component {\n  componentDidMount() {\n    this.props.getOverviewData();\n  }\n\n  render() {\n    const { isFullScreen } = this.props;\n\n    return (\n      <>\n        <Spinner />\n        <Header />\n        <Map />\n        <Dashboard />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { isFullScreen } = state.map;\n  return { isFullScreen };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getOverviewData: () => getOverviewData()(dispatch),\n  };\n};\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(AppComponent);\n\nexport { App };\n","import {\n  UPDATE_MAP_FULL_SCREEN_STATUS,\n  UPDATE_MAP_CENTER_AND_ZOOM,\n  UPDATE_LAST_CLICKED_INFO,\n} from \"../actionTypes/map\";\nimport { FULL_SCREEN_MAP } from \"../constants/map\";\n\nconst MAP_REDUCER_DEFAULT_VALUE = {\n  isFullScreen: true,\n  center: FULL_SCREEN_MAP.INITIAL_CENTER,\n  zoom: FULL_SCREEN_MAP.ZOOM_BOUNDARY.min,\n  lastClickedInfo: null,\n};\n\nexport function mapReducer(state = MAP_REDUCER_DEFAULT_VALUE, action) {\n  switch (action.type) {\n    case UPDATE_MAP_FULL_SCREEN_STATUS:\n    case UPDATE_MAP_CENTER_AND_ZOOM:\n    case UPDATE_LAST_CLICKED_INFO:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n}\n","import { UPDATE_SEARCH_FIELD_EXPANSION_STATUS } from \"../actionTypes/search\";\n\nconst SEARCH_REDUCER_DEFAULT_VALUE = {\n  showSearchInput: false,\n};\n\nexport function searchReducer(state = SEARCH_REDUCER_DEFAULT_VALUE, action) {\n  switch (action.type) {\n    case UPDATE_SEARCH_FIELD_EXPANSION_STATUS:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n}\n","import { UPDATE_LOADING_STATUS } from \"../actionTypes/loading\";\n\nconst LOADING_REDUCER_DEFAULT_VALUE = {\n  isLoading: false,\n};\n\nexport function loadingReducer(state = LOADING_REDUCER_DEFAULT_VALUE, action) {\n  switch (action.type) {\n    case UPDATE_LOADING_STATUS:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n}\n","import { OVERVIEW_DATA_RECEIVED } from \"../actionTypes/xhr\";\n\nconst XHR_REDUCER = {\n  overviewData: {},\n};\n\nexport function xhrReducer(state = XHR_REDUCER, action) {\n  switch (action.type) {\n    case OVERVIEW_DATA_RECEIVED:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n}\n","import {\n  UPDATE_DATE_PICKER_EXPANSION_STATUS,\n  UPDATE_DATE_RANGE,\n} from \"../actionTypes/filter\";\n\nconst FILTER_REDUCER_DEFAULT_VALUE = {\n  showDatePicker: false,\n  datesRange: [],\n};\n\nexport function filterReducer(state = FILTER_REDUCER_DEFAULT_VALUE, action) {\n  switch (action.type) {\n    case UPDATE_DATE_PICKER_EXPANSION_STATUS:\n    case UPDATE_DATE_RANGE:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { mapReducer } from \"./mapReducer\";\nimport { searchReducer } from \"./searchReducer\";\nimport { loadingReducer } from \"./loadingReducer\";\nimport { xhrReducer } from \"./xhrReducer\";\nimport { filterReducer } from \"./filterReducer\";\n\nexport default combineReducers({\n  map: mapReducer,\n  search: searchReducer,\n  loading: loadingReducer,\n  xhr: xhrReducer,\n  filter: filterReducer,\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\n\nimport \"./css/antd.css\";\nimport \"react-vis/dist/style.css\";\n\nimport { App } from \"./js/components/App\";\nimport reducers from \"./js/reducers\";\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}